PSeudoCrypt/PortShellCrypt -- PSC
=================================

0. License
----------

See LICENSE.txt

1. What it is
-------------

PSC allows for end-to-end encryption of SSH,
telnet, minicom or even portshell sessions across multiple hosts.
Basically it works like the "screen" program but it transparently
encrypts/decrypts the things you type until it reaches its
real destination. So you can start
"psc-local" on your local box, SSH through 10 hops for example,
and at the end-box you start "psc-remote" and anything between
the 10 hops is not just SSH encrypted but also rc4 encrypted
by PSC between your local host and the end-box. So, noone inbetween,
even if he controls the SSH shells you use on the intermediate hops,
can see what you type.
PSC can also establish a full functional terminal over a simple
portshell (inetd portshell for example) so you can run command-line
completion, mc or whatever you want to on that portshell.
This normally wont work, since stdin/stdout of a portshell is a socket,
but by using PSC you add an additional crypto and pty layer to the
connection so you end up in a full functional shell as you would
get one from SSH.

You can use integrated RC4 crypto or blowfish OFB via openssl
if you compile with -DUSE_SSL.


2. Usage
--------

Please see 1). Edit the Makefile to reflect your secret keys.

Then 'make'. Start "psc-local" and you will find your normal shell.
Do whatever you need to to get to your remote-host and start
"psc-remote" there (needs file-copying as it seems). Done.
You will then be dropped in the pty'ed/rc4'ed remote shell.
When exiting, the session is plaintext again. Repeat until root
kills you.
If you dont have Unix98 PTY support, disable HAVE_UNIX98 in the Makefile.
PSC works also inside other pty based programs such as SSH and screen.


3. Related work
---------------

In 2001 I wrote pt-why which uses SSL to establish the crypto
communication. It worked but was not 7-bit clean. PSC is 7-bit clean,
it uses a Base64 encoding plus #,$,%,* and \n character for
detecing unwanted echos and to signal the end of the crypted communication.
These 5 characters are not part of the Base64 character set, so it
doesnt clash but we have still 7-Bit ASCII stream which makes it
work on most communication channels.

4. Checking crypto state
------------------------

In order to be sure whether your connection is really encrypted and
noone in between just prints

"psc: Seen STARTTLS sequence, enabling crypto."

to your screen, you can hit Ctrl-C, sending a SIGINT to your local psc
command. Then it will tell you whether it has enabled crypto or not.

NOTE that psc only helps against attackers on the middle hops, not
on your local machine or the end point.

5.
--

If you have questions beyond how to type 'make' you can reach me
at sebastian.krahmer [at] gmail.com

